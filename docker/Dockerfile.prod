# Stage 1: Build environment (builder)
FROM python:3.13.2-slim-bullseye AS builder

# Set timezone
ENV TZ=UTC+2
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install build dependencies (including PostgreSQL dev libraries, build tools, and curl)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    curl && \
    rm -rf /var/lib/apt/lists/*

# Upgrade pip and install Pipenv
RUN pip install --upgrade pip pipenv

WORKDIR /app

# Copy Pipfile and Pipfile.lock, then install only production dependencies
COPY Pipfile Pipfile.lock ./
RUN pipenv install --system --deploy --ignore-pipfile

# Copy the rest of the application code
COPY . .

# Stage 2: Final production image
FROM python:3.13.2-slim AS final

# Set timezone
ENV TZ=UTC+2
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install only runtime dependencies (e.g., libpq5)
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy installed Python packages and application code from the builder stage.
COPY --from=builder /usr/local/lib/python3.13/site-packages/ /usr/local/lib/python3.13/site-packages/
COPY --from=builder /app /app

# Set up the entrypoint script
# COPY docker/entrypoint.sh /entrypoint.sh
# RUN sed -i 's/\r$//g' /entrypoint.sh && chmod +x /entrypoint.sh

# ENTRYPOINT ["/entrypoint.sh"]

CMD ["bash", "-c", "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --app-dir server --port 8000 --reload"]
